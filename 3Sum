---3Sum---
 class Solution {

    // Use Set to avoid duplicate triplets
    Set<List<Integer>> result = new HashSet<>();

    private void twoSum(int[] nums, int target, int i, int j) {
        while (i < j) {
            int sum = nums[i] + nums[j];
            if (sum > target) {
                j--;
            } else if (sum < target) {
                i++;
            } else {
                // Found a triplet
                result.add(Arrays.asList(-target, nums[i], nums[j]));

                // Move both pointers and skip duplicates
                int leftVal = nums[i];
                int rightVal = nums[j];
                while (i < j && nums[i] == leftVal) i++;
                while (i < j && nums[j] == rightVal) j--;
            }
        }
    }

    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        if (n < 3) return new ArrayList<>();

        Arrays.sort(nums);

        for (int i = 0; i < n - 2; i++) {
            // Skip duplicates for nums[i]
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int n1 = nums[i];
            int target = -n1;

            twoSum(nums, target, i + 1, n - 1);
        }

        return new ArrayList<>(result); // Convert set to list before returning
    }
}
